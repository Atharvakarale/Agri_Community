{"ast":null,"code":"\"use strict\";\n\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DomainConfigListInstance = exports.DomainConfigInstance = exports.DomainConfigContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass DomainConfigContextImpl {\n  constructor(_version, domainSid) {\n    this._version = _version;\n    if (!(0, utility_1.isValidPathParam)(domainSid)) {\n      throw new Error(\"Parameter 'domainSid' is not valid.\");\n    }\n    this._solution = {\n      domainSid\n    };\n    this._uri = `/LinkShortening/Domains/${domainSid}/Config`;\n  }\n  fetch(callback) {\n    const headers = {};\n    headers[\"Accept\"] = \"application/json\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.fetch({\n        uri: instance._uri,\n        method: \"get\",\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  update(params, callback) {\n    if (params instanceof Function) {\n      callback = params;\n      params = {};\n    } else {\n      params = params || {};\n    }\n    let data = {};\n    if (params[\"fallbackUrl\"] !== undefined) data[\"FallbackUrl\"] = params[\"fallbackUrl\"];\n    if (params[\"callbackUrl\"] !== undefined) data[\"CallbackUrl\"] = params[\"callbackUrl\"];\n    if (params[\"continueOnFailure\"] !== undefined) data[\"ContinueOnFailure\"] = serialize.bool(params[\"continueOnFailure\"]);\n    if (params[\"disableHttps\"] !== undefined) data[\"DisableHttps\"] = serialize.bool(params[\"disableHttps\"]);\n    const headers = {};\n    headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    headers[\"Accept\"] = \"application/json\";\n    const instance = this;\n    let operationVersion = instance._version,\n      operationPromise = operationVersion.update({\n        uri: instance._uri,\n        method: \"post\",\n        data,\n        headers\n      });\n    operationPromise = operationPromise.then(payload => new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));\n    operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n    return operationPromise;\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return this._solution;\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.DomainConfigContextImpl = DomainConfigContextImpl;\nclass DomainConfigInstance {\n  constructor(_version, payload, domainSid) {\n    this._version = _version;\n    this.domainSid = payload.domain_sid;\n    this.configSid = payload.config_sid;\n    this.fallbackUrl = payload.fallback_url;\n    this.callbackUrl = payload.callback_url;\n    this.continueOnFailure = payload.continue_on_failure;\n    this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n    this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n    this.url = payload.url;\n    this.disableHttps = payload.disable_https;\n    this._solution = {\n      domainSid: domainSid || this.domainSid\n    };\n  }\n  get _proxy() {\n    this._context = this._context || new DomainConfigContextImpl(this._version, this._solution.domainSid);\n    return this._context;\n  }\n  /**\n   * Fetch a DomainConfigInstance\n   *\n   * @param callback - Callback to handle processed record\n   *\n   * @returns Resolves to processed DomainConfigInstance\n   */\n  fetch(callback) {\n    return this._proxy.fetch(callback);\n  }\n  update(params, callback) {\n    return this._proxy.update(params, callback);\n  }\n  /**\n   * Provide a user-friendly representation\n   *\n   * @returns Object\n   */\n  toJSON() {\n    return {\n      domainSid: this.domainSid,\n      configSid: this.configSid,\n      fallbackUrl: this.fallbackUrl,\n      callbackUrl: this.callbackUrl,\n      continueOnFailure: this.continueOnFailure,\n      dateCreated: this.dateCreated,\n      dateUpdated: this.dateUpdated,\n      url: this.url,\n      disableHttps: this.disableHttps\n    };\n  }\n  [util_1.inspect.custom](_depth, options) {\n    return (0, util_1.inspect)(this.toJSON(), options);\n  }\n}\nexports.DomainConfigInstance = DomainConfigInstance;\nfunction DomainConfigListInstance(version) {\n  const instance = domainSid => instance.get(domainSid);\n  instance.get = function get(domainSid) {\n    return new DomainConfigContextImpl(version, domainSid);\n  };\n  instance._version = version;\n  instance._solution = {};\n  instance._uri = ``;\n  instance.toJSON = function toJSON() {\n    return instance._solution;\n  };\n  instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n    return (0, util_1.inspect)(instance.toJSON(), options);\n  };\n  return instance;\n}\nexports.DomainConfigListInstance = DomainConfigListInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","DomainConfigListInstance","DomainConfigInstance","DomainConfigContextImpl","util_1","require","deserialize","serialize","utility_1","constructor","_version","domainSid","isValidPathParam","Error","_solution","_uri","fetch","callback","headers","instance","operationVersion","operationPromise","uri","method","then","payload","setPromiseCallback","update","params","Function","data","undefined","bool","toJSON","inspect","custom","_depth","options","domain_sid","configSid","config_sid","fallbackUrl","fallback_url","callbackUrl","callback_url","continueOnFailure","continue_on_failure","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","disableHttps","disable_https","_proxy","_context","version","get","inspectImpl"],"sources":["D:/agri-community/client/node_modules/twilio/lib/rest/messaging/v1/domainConfig.js"],"sourcesContent":["\"use strict\";\n/*\n * This code was generated by\n * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __\n *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\\ | |___ |__/ |__|  | |  | |__/\n *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \\| |___ |  \\ |  |  | |__| |  \\\n *\n * Twilio - Messaging\n * This is the public Twilio REST API.\n *\n * NOTE: This class is auto generated by OpenAPI Generator.\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DomainConfigListInstance = exports.DomainConfigInstance = exports.DomainConfigContextImpl = void 0;\nconst util_1 = require(\"util\");\nconst deserialize = require(\"../../../base/deserialize\");\nconst serialize = require(\"../../../base/serialize\");\nconst utility_1 = require(\"../../../base/utility\");\nclass DomainConfigContextImpl {\n    constructor(_version, domainSid) {\n        this._version = _version;\n        if (!(0, utility_1.isValidPathParam)(domainSid)) {\n            throw new Error(\"Parameter 'domainSid' is not valid.\");\n        }\n        this._solution = { domainSid };\n        this._uri = `/LinkShortening/Domains/${domainSid}/Config`;\n    }\n    fetch(callback) {\n        const headers = {};\n        headers[\"Accept\"] = \"application/json\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.fetch({\n            uri: instance._uri,\n            method: \"get\",\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    update(params, callback) {\n        if (params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        else {\n            params = params || {};\n        }\n        let data = {};\n        if (params[\"fallbackUrl\"] !== undefined)\n            data[\"FallbackUrl\"] = params[\"fallbackUrl\"];\n        if (params[\"callbackUrl\"] !== undefined)\n            data[\"CallbackUrl\"] = params[\"callbackUrl\"];\n        if (params[\"continueOnFailure\"] !== undefined)\n            data[\"ContinueOnFailure\"] = serialize.bool(params[\"continueOnFailure\"]);\n        if (params[\"disableHttps\"] !== undefined)\n            data[\"DisableHttps\"] = serialize.bool(params[\"disableHttps\"]);\n        const headers = {};\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n        headers[\"Accept\"] = \"application/json\";\n        const instance = this;\n        let operationVersion = instance._version, operationPromise = operationVersion.update({\n            uri: instance._uri,\n            method: \"post\",\n            data,\n            headers,\n        });\n        operationPromise = operationPromise.then((payload) => new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));\n        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);\n        return operationPromise;\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return this._solution;\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.DomainConfigContextImpl = DomainConfigContextImpl;\nclass DomainConfigInstance {\n    constructor(_version, payload, domainSid) {\n        this._version = _version;\n        this.domainSid = payload.domain_sid;\n        this.configSid = payload.config_sid;\n        this.fallbackUrl = payload.fallback_url;\n        this.callbackUrl = payload.callback_url;\n        this.continueOnFailure = payload.continue_on_failure;\n        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);\n        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);\n        this.url = payload.url;\n        this.disableHttps = payload.disable_https;\n        this._solution = { domainSid: domainSid || this.domainSid };\n    }\n    get _proxy() {\n        this._context =\n            this._context ||\n                new DomainConfigContextImpl(this._version, this._solution.domainSid);\n        return this._context;\n    }\n    /**\n     * Fetch a DomainConfigInstance\n     *\n     * @param callback - Callback to handle processed record\n     *\n     * @returns Resolves to processed DomainConfigInstance\n     */\n    fetch(callback) {\n        return this._proxy.fetch(callback);\n    }\n    update(params, callback) {\n        return this._proxy.update(params, callback);\n    }\n    /**\n     * Provide a user-friendly representation\n     *\n     * @returns Object\n     */\n    toJSON() {\n        return {\n            domainSid: this.domainSid,\n            configSid: this.configSid,\n            fallbackUrl: this.fallbackUrl,\n            callbackUrl: this.callbackUrl,\n            continueOnFailure: this.continueOnFailure,\n            dateCreated: this.dateCreated,\n            dateUpdated: this.dateUpdated,\n            url: this.url,\n            disableHttps: this.disableHttps,\n        };\n    }\n    [util_1.inspect.custom](_depth, options) {\n        return (0, util_1.inspect)(this.toJSON(), options);\n    }\n}\nexports.DomainConfigInstance = DomainConfigInstance;\nfunction DomainConfigListInstance(version) {\n    const instance = ((domainSid) => instance.get(domainSid));\n    instance.get = function get(domainSid) {\n        return new DomainConfigContextImpl(version, domainSid);\n    };\n    instance._version = version;\n    instance._solution = {};\n    instance._uri = ``;\n    instance.toJSON = function toJSON() {\n        return instance._solution;\n    };\n    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {\n        return (0, util_1.inspect)(instance.toJSON(), options);\n    };\n    return instance;\n}\nexports.DomainConfigListInstance = DomainConfigListInstance;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAGF,OAAO,CAACG,oBAAoB,GAAGH,OAAO,CAACI,uBAAuB,GAAG,KAAK,CAAC;AAC1G,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACxD,MAAME,SAAS,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACpD,MAAMG,SAAS,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAMF,uBAAuB,CAAC;EAC1BM,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAC7B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC,CAAC,CAAC,EAAEF,SAAS,CAACI,gBAAgB,EAAED,SAAS,CAAC,EAAE;MAC7C,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;IAC1D;IACA,IAAI,CAACC,SAAS,GAAG;MAAEH;IAAU,CAAC;IAC9B,IAAI,CAACI,IAAI,GAAG,2BAA2BJ,SAAS,SAAS;EAC7D;EACAK,KAAKA,CAACC,QAAQ,EAAE;IACZ,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClBA,OAAO,CAAC,QAAQ,CAAC,GAAG,kBAAkB;IACtC,MAAMC,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAACT,QAAQ;MAAEW,gBAAgB,GAAGD,gBAAgB,CAACJ,KAAK,CAAC;QAChFM,GAAG,EAAEH,QAAQ,CAACJ,IAAI;QAClBQ,MAAM,EAAE,KAAK;QACbL;MACJ,CAAC,CAAC;IACFG,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIvB,oBAAoB,CAACkB,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAACL,SAAS,CAACH,SAAS,CAAC,CAAC;IACxIU,gBAAgB,GAAGF,QAAQ,CAACT,QAAQ,CAACgB,kBAAkB,CAACL,gBAAgB,EAAEJ,QAAQ,CAAC;IACnF,OAAOI,gBAAgB;EAC3B;EACAM,MAAMA,CAACC,MAAM,EAAEX,QAAQ,EAAE;IACrB,IAAIW,MAAM,YAAYC,QAAQ,EAAE;MAC5BZ,QAAQ,GAAGW,MAAM;MACjBA,MAAM,GAAG,CAAC,CAAC;IACf,CAAC,MACI;MACDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACzB;IACA,IAAIE,IAAI,GAAG,CAAC,CAAC;IACb,IAAIF,MAAM,CAAC,aAAa,CAAC,KAAKG,SAAS,EACnCD,IAAI,CAAC,aAAa,CAAC,GAAGF,MAAM,CAAC,aAAa,CAAC;IAC/C,IAAIA,MAAM,CAAC,aAAa,CAAC,KAAKG,SAAS,EACnCD,IAAI,CAAC,aAAa,CAAC,GAAGF,MAAM,CAAC,aAAa,CAAC;IAC/C,IAAIA,MAAM,CAAC,mBAAmB,CAAC,KAAKG,SAAS,EACzCD,IAAI,CAAC,mBAAmB,CAAC,GAAGvB,SAAS,CAACyB,IAAI,CAACJ,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAC3E,IAAIA,MAAM,CAAC,cAAc,CAAC,KAAKG,SAAS,EACpCD,IAAI,CAAC,cAAc,CAAC,GAAGvB,SAAS,CAACyB,IAAI,CAACJ,MAAM,CAAC,cAAc,CAAC,CAAC;IACjE,MAAMV,OAAO,GAAG,CAAC,CAAC;IAClBA,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7DA,OAAO,CAAC,QAAQ,CAAC,GAAG,kBAAkB;IACtC,MAAMC,QAAQ,GAAG,IAAI;IACrB,IAAIC,gBAAgB,GAAGD,QAAQ,CAACT,QAAQ;MAAEW,gBAAgB,GAAGD,gBAAgB,CAACO,MAAM,CAAC;QACjFL,GAAG,EAAEH,QAAQ,CAACJ,IAAI;QAClBQ,MAAM,EAAE,MAAM;QACdO,IAAI;QACJZ;MACJ,CAAC,CAAC;IACFG,gBAAgB,GAAGA,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAK,IAAIvB,oBAAoB,CAACkB,gBAAgB,EAAEK,OAAO,EAAEN,QAAQ,CAACL,SAAS,CAACH,SAAS,CAAC,CAAC;IACxIU,gBAAgB,GAAGF,QAAQ,CAACT,QAAQ,CAACgB,kBAAkB,CAACL,gBAAgB,EAAEJ,QAAQ,CAAC;IACnF,OAAOI,gBAAgB;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIY,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACnB,SAAS;EACzB;EACA,CAACV,MAAM,CAAC8B,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEjC,MAAM,CAAC8B,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACAtC,OAAO,CAACI,uBAAuB,GAAGA,uBAAuB;AACzD,MAAMD,oBAAoB,CAAC;EACvBO,WAAWA,CAACC,QAAQ,EAAEe,OAAO,EAAEd,SAAS,EAAE;IACtC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGc,OAAO,CAACa,UAAU;IACnC,IAAI,CAACC,SAAS,GAAGd,OAAO,CAACe,UAAU;IACnC,IAAI,CAACC,WAAW,GAAGhB,OAAO,CAACiB,YAAY;IACvC,IAAI,CAACC,WAAW,GAAGlB,OAAO,CAACmB,YAAY;IACvC,IAAI,CAACC,iBAAiB,GAAGpB,OAAO,CAACqB,mBAAmB;IACpD,IAAI,CAACC,WAAW,GAAGzC,WAAW,CAAC0C,eAAe,CAACvB,OAAO,CAACwB,YAAY,CAAC;IACpE,IAAI,CAACC,WAAW,GAAG5C,WAAW,CAAC0C,eAAe,CAACvB,OAAO,CAAC0B,YAAY,CAAC;IACpE,IAAI,CAACC,GAAG,GAAG3B,OAAO,CAAC2B,GAAG;IACtB,IAAI,CAACC,YAAY,GAAG5B,OAAO,CAAC6B,aAAa;IACzC,IAAI,CAACxC,SAAS,GAAG;MAAEH,SAAS,EAAEA,SAAS,IAAI,IAAI,CAACA;IAAU,CAAC;EAC/D;EACA,IAAI4C,MAAMA,CAAA,EAAG;IACT,IAAI,CAACC,QAAQ,GACT,IAAI,CAACA,QAAQ,IACT,IAAIrD,uBAAuB,CAAC,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACI,SAAS,CAACH,SAAS,CAAC;IAC5E,OAAO,IAAI,CAAC6C,QAAQ;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIxC,KAAKA,CAACC,QAAQ,EAAE;IACZ,OAAO,IAAI,CAACsC,MAAM,CAACvC,KAAK,CAACC,QAAQ,CAAC;EACtC;EACAU,MAAMA,CAACC,MAAM,EAAEX,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACsC,MAAM,CAAC5B,MAAM,CAACC,MAAM,EAAEX,QAAQ,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;EACIgB,MAAMA,CAAA,EAAG;IACL,OAAO;MACHtB,SAAS,EAAE,IAAI,CAACA,SAAS;MACzB4B,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BE,iBAAiB,EAAE,IAAI,CAACA,iBAAiB;MACzCE,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BG,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BE,GAAG,EAAE,IAAI,CAACA,GAAG;MACbC,YAAY,EAAE,IAAI,CAACA;IACvB,CAAC;EACL;EACA,CAACjD,MAAM,CAAC8B,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACrC,OAAO,CAAC,CAAC,EAAEjC,MAAM,CAAC8B,OAAO,EAAE,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EACtD;AACJ;AACAtC,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AACnD,SAASD,wBAAwBA,CAACwD,OAAO,EAAE;EACvC,MAAMtC,QAAQ,GAAKR,SAAS,IAAKQ,QAAQ,CAACuC,GAAG,CAAC/C,SAAS,CAAE;EACzDQ,QAAQ,CAACuC,GAAG,GAAG,SAASA,GAAGA,CAAC/C,SAAS,EAAE;IACnC,OAAO,IAAIR,uBAAuB,CAACsD,OAAO,EAAE9C,SAAS,CAAC;EAC1D,CAAC;EACDQ,QAAQ,CAACT,QAAQ,GAAG+C,OAAO;EAC3BtC,QAAQ,CAACL,SAAS,GAAG,CAAC,CAAC;EACvBK,QAAQ,CAACJ,IAAI,GAAG,EAAE;EAClBI,QAAQ,CAACc,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAChC,OAAOd,QAAQ,CAACL,SAAS;EAC7B,CAAC;EACDK,QAAQ,CAACf,MAAM,CAAC8B,OAAO,CAACC,MAAM,CAAC,GAAG,SAASwB,WAAWA,CAACvB,MAAM,EAAEC,OAAO,EAAE;IACpE,OAAO,CAAC,CAAC,EAAEjC,MAAM,CAAC8B,OAAO,EAAEf,QAAQ,CAACc,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC1D,CAAC;EACD,OAAOlB,QAAQ;AACnB;AACApB,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}