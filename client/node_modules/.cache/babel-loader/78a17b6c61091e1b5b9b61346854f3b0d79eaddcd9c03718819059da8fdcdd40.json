{"ast":null,"code":"var _jsxFileName = \"D:\\\\agri-community\\\\client\\\\src\\\\components\\\\Chat\\\\ChatRoom.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:5000\");\nconst openai = new OpenAIApi(new Configuration({\n  apiKey: \"YOUR_OPENAI_API_KEY\" // Replace with your OpenAI API Key\n}));\nconst ChatRoom = () => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setChat(prevChat => [...prevChat, data]);\n    });\n    return () => socket.off(\"receive_message\");\n  }, []);\n  const sendMessage = async () => {\n    if (message.trim() !== \"\") {\n      const userMessage = {\n        sender: \"You\",\n        message\n      };\n      setChat(prevChat => [...prevChat, userMessage]);\n      socket.emit(\"send_message\", userMessage);\n      setMessage(\"\");\n\n      // Get AI Response\n      const aiResponse = await getAIResponse(message);\n      if (aiResponse) {\n        const botMessage = {\n          sender: \"AI Assistant\",\n          message: aiResponse\n        };\n        setChat(prevChat => [...prevChat, botMessage]);\n        socket.emit(\"send_message\", botMessage);\n      }\n    }\n  };\n  const getAIResponse = async userMessage => {\n    try {\n      const response = await openai.createChatCompletion({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: userMessage\n        }]\n      });\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error(\"Error fetching AI response:\", error);\n      return \"Sorry, I couldn't understand that.\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Farmer Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: chat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `chat-message ${msg.sender === \"You\" ? \"user\" : \"ai\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), \" \", msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Ask something...\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"wtsVqqyDD4r5L0iimIoIo+44xEY=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["useState","useEffect","io","Configuration","OpenAIApi","jsxDEV","_jsxDEV","socket","connect","openai","apiKey","ChatRoom","_s","message","setMessage","chat","setChat","on","data","prevChat","off","sendMessage","trim","userMessage","sender","emit","aiResponse","getAIResponse","botMessage","response","createChatCompletion","model","messages","role","content","choices","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/agri-community/client/src/components/Chat/ChatRoom.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\n\r\nconst socket = io.connect(\"http://localhost:5000\");\r\n\r\nconst openai = new OpenAIApi(\r\n  new Configuration({\r\n    apiKey: \"YOUR_OPENAI_API_KEY\", // Replace with your OpenAI API Key\r\n  })\r\n);\r\n\r\nconst ChatRoom = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chat, setChat] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setChat((prevChat) => [...prevChat, data]);\r\n    });\r\n\r\n    return () => socket.off(\"receive_message\");\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (message.trim() !== \"\") {\r\n      const userMessage = { sender: \"You\", message };\r\n      setChat((prevChat) => [...prevChat, userMessage]);\r\n      socket.emit(\"send_message\", userMessage);\r\n\r\n      setMessage(\"\");\r\n\r\n      // Get AI Response\r\n      const aiResponse = await getAIResponse(message);\r\n      if (aiResponse) {\r\n        const botMessage = { sender: \"AI Assistant\", message: aiResponse };\r\n        setChat((prevChat) => [...prevChat, botMessage]);\r\n        socket.emit(\"send_message\", botMessage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getAIResponse = async (userMessage) => {\r\n    try {\r\n      const response = await openai.createChatCompletion({\r\n        model: \"gpt-3.5-turbo\",\r\n        messages: [{ role: \"user\", content: userMessage }],\r\n      });\r\n      return response.data.choices[0].message.content;\r\n    } catch (error) {\r\n      console.error(\"Error fetching AI response:\", error);\r\n      return \"Sorry, I couldn't understand that.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>Farmer Chat Room</h2>\r\n      <div className=\"chat-box\">\r\n        {chat.map((msg, index) => (\r\n          <p key={index} className={`chat-message ${msg.sender === \"You\" ? \"user\" : \"ai\"}`}>\r\n            <strong>{msg.sender}:</strong> {msg.message}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Ask something...\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}