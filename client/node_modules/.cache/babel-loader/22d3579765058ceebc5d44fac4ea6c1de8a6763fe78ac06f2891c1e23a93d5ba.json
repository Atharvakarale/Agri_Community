{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nconst RequestClient_1 = __importDefault(require(\"./RequestClient\")); /* jshint ignore:line */\nconst os = require(\"os\"); /* jshint ignore:line */\nconst url = require(\"url\"); /* jshint ignore:line */\nconst moduleInfo = require(\"../../package.json\"); /* jshint ignore:line */\nconst util = require(\"util\"); /* jshint ignore:line */\nconst RestException = require(\"../base/RestException\"); /* jshint ignore:line */\nvar Twilio;\n(function (Twilio) {\n  /* jshint ignore:start */\n  /**\n   * Parent class for Twilio Client that implements request & validation logic\n   */\n  /* jshint ignore:end */\n  class Client {\n    /* jshint ignore:start */\n    /**\n     * Create a BaseTwilio instance\n     *\n     * @param username -\n     *          The username used for authentication. This is normally account sid, but if using key/secret auth will be\n     *          the api key sid.\n     * @param password -\n     *          The password used for authentication. This is normally auth token, but if using key/secret auth will be\n     *          the secret.\n     * @param opts - The options argument\n     *\n     * @returns A new instance of BaseTwilio\n     */\n    /* jshint ignore:end */\n    constructor(username, password, opts) {\n      this.setOpts(opts);\n      this.username = username ?? this.env?.TWILIO_ACCOUNT_SID ?? process.env.TWILIO_ACCOUNT_SID;\n      this.password = password ?? this.env?.TWILIO_AUTH_TOKEN ?? process.env.TWILIO_AUTH_TOKEN;\n      this.accountSid = \"\";\n      this.setAccountSid(this.opts?.accountSid || this.username);\n      this.invalidateOAuth();\n    }\n    setOpts(opts) {\n      this.opts = opts || {};\n      this.env = this.opts.env || {};\n      this.edge = this.opts.edge ?? this.env.TWILIO_EDGE ?? process.env.TWILIO_EDGE;\n      this.region = this.opts.region ?? this.env.TWILIO_REGION ?? process.env.TWILIO_REGION;\n      this.logLevel = this.opts.logLevel ?? this.env.TWILIO_LOG_LEVEL ?? process.env.TWILIO_LOG_LEVEL;\n      this.timeout = this.opts.timeout;\n      this.keepAlive = this.opts.keepAlive;\n      this.keepAliveMsecs = this.opts.keepAliveMsecs;\n      this.maxSockets = this.opts.maxSockets;\n      this.maxTotalSockets = this.opts.maxTotalSockets;\n      this.maxFreeSockets = this.opts.maxFreeSockets;\n      this.scheduling = this.opts.scheduling;\n      this.ca = this.opts.ca;\n      this.autoRetry = this.opts.autoRetry || false;\n      this.maxRetryDelay = this.opts.maxRetryDelay;\n      this.maxRetries = this.opts.maxRetries;\n      this.userAgentExtensions = this.opts.userAgentExtensions || [];\n      this._httpClient = this.opts.httpClient;\n      if (this.opts.lazyLoading === false) {\n        this._httpClient = this.httpClient;\n      }\n    }\n    setAccountSid(accountSid) {\n      this.accountSid = accountSid || \"\";\n      if (this.accountSid && !this.accountSid?.startsWith(\"AC\")) {\n        const apiKeyMsg = this.accountSid?.startsWith(\"SK\") ? \". The given SID indicates an API Key which requires the accountSid to be passed as an additional option\" : \"\";\n        throw new Error(\"accountSid must start with AC\" + apiKeyMsg);\n      }\n    }\n    setCredentialProvider(credentialProvider) {\n      this.credentialProvider = credentialProvider;\n      this.accountSid = \"\";\n      this.invalidateBasicAuth();\n    }\n    invalidateBasicAuth() {\n      this.username = undefined;\n      this.password = undefined;\n    }\n    invalidateOAuth() {\n      this.credentialProvider = undefined;\n    }\n    get httpClient() {\n      if (!this._httpClient) {\n        this._httpClient = new RequestClient_1.default({\n          timeout: this.timeout,\n          keepAlive: this.keepAlive,\n          keepAliveMsecs: this.keepAliveMsecs,\n          maxSockets: this.maxSockets,\n          maxTotalSockets: this.maxTotalSockets,\n          maxFreeSockets: this.maxFreeSockets,\n          scheduling: this.scheduling,\n          ca: this.ca,\n          autoRetry: this.autoRetry,\n          maxRetryDelay: this.maxRetryDelay,\n          maxRetries: this.maxRetries\n        });\n      }\n      return this._httpClient;\n    }\n    /* jshint ignore:start */\n    /**\n     * Makes a request to the Twilio API using the configured http client.\n     * Authentication information is automatically added if none is provided.\n     *\n     * @param opts - The options argument\n     */\n    /* jshint ignore:end */\n    request(opts) {\n      opts = opts || {};\n      if (!opts.method) {\n        throw new Error(\"method is required\");\n      }\n      if (!opts.uri) {\n        throw new Error(\"uri is required\");\n      }\n      const username = opts.username || this.username;\n      const password = opts.password || this.password;\n      const authStrategy = opts.authStrategy || this.credentialProvider?.toAuthStrategy();\n      if (!authStrategy) {\n        if (!username) {\n          (() => {\n            throw new Error(\"username is required\");\n          })();\n        }\n        if (!password) {\n          (() => {\n            throw new Error(\"password is required\");\n          })();\n        }\n      }\n      const headers = opts.headers || {};\n      const pkgVersion = moduleInfo.version;\n      const osName = os.platform();\n      const osArch = os.arch();\n      const nodeVersion = process.version;\n      headers[\"User-Agent\"] = util.format(\"twilio-node/%s (%s %s) node/%s\", pkgVersion, osName, osArch, nodeVersion);\n      this.userAgentExtensions?.forEach(extension => {\n        headers[\"User-Agent\"] += ` ${extension}`;\n      });\n      headers[\"Accept-Charset\"] = \"utf-8\";\n      if ((opts.method === \"post\" || opts.method === \"put\") && !headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n      }\n      if (opts.method !== \"delete\" && !headers[\"Accept\"]) {\n        headers[\"Accept\"] = \"application/json\";\n      }\n      var uri = new url.URL(opts.uri);\n      uri.hostname = this.getHostname(uri.hostname, this.edge, this.region);\n      return this.httpClient?.request({\n        method: opts.method,\n        uri: uri.href,\n        username: username,\n        password: password,\n        authStrategy: authStrategy,\n        headers: headers,\n        params: opts.params,\n        data: opts.data,\n        timeout: opts.timeout,\n        allowRedirects: opts.allowRedirects,\n        logLevel: opts.logLevel\n      });\n    }\n    /* jshint ignore:start */\n    /**\n     * Adds a region and/or edge to a given hostname\n     *\n     * @param hostname - A URI hostname (e.g. api.twilio.com)\n     * @param targetEdge - The targeted edge location (e.g. sydney)\n     * @param targetRegion - The targeted region location (e.g. au1)\n     */\n    /* jshint ignore:end */\n    getHostname(hostname, targetEdge, targetRegion) {\n      const defaultRegion = \"us1\";\n      const domain = hostname.split(\".\").slice(-2).join(\".\");\n      const prefix = hostname.split(\".\" + domain)[0];\n      let [product, edge, region] = prefix.split(\".\");\n      if (edge && !region) {\n        region = edge;\n        edge = undefined;\n      }\n      region = targetRegion || region || targetEdge && defaultRegion;\n      if (!region) {\n        return hostname;\n      }\n      edge = targetEdge || edge;\n      return [product, edge, region, domain].filter(part => part).join(\".\");\n    }\n    /* jshint ignore:start */\n    /**\n     * Test if your environment is impacted by a TLS or certificate\n     * change is by sending an HTTP request to the test endpoint\n     *\n     * @throws RestException if the request fails\n     *\n     */\n    /* jshint ignore:end */\n    validateSslCert() {\n      return this.httpClient?.request({\n        method: \"get\",\n        uri: \"https://tls-test.twilio.com:443\"\n      }).then(response => {\n        if (response[\"statusCode\"] < 200 || response[\"statusCode\"] >= 300) {\n          throw new RestException(response);\n        }\n        return response;\n      });\n    }\n  }\n  Twilio.Client = Client;\n})(Twilio || (Twilio = {}));\nmodule.exports = Twilio;","map":{"version":3,"names":["__importDefault","mod","__esModule","RequestClient_1","require","os","url","moduleInfo","util","RestException","Twilio","Client","constructor","username","password","opts","setOpts","env","TWILIO_ACCOUNT_SID","process","TWILIO_AUTH_TOKEN","accountSid","setAccountSid","invalidateOAuth","edge","TWILIO_EDGE","region","TWILIO_REGION","logLevel","TWILIO_LOG_LEVEL","timeout","keepAlive","keepAliveMsecs","maxSockets","maxTotalSockets","maxFreeSockets","scheduling","ca","autoRetry","maxRetryDelay","maxRetries","userAgentExtensions","_httpClient","httpClient","lazyLoading","startsWith","apiKeyMsg","Error","setCredentialProvider","credentialProvider","invalidateBasicAuth","undefined","default","request","method","uri","authStrategy","toAuthStrategy","headers","pkgVersion","version","osName","platform","osArch","arch","nodeVersion","format","forEach","extension","URL","hostname","getHostname","href","params","data","allowRedirects","targetEdge","targetRegion","defaultRegion","domain","split","slice","join","prefix","product","filter","part","validateSslCert","then","response","module","exports"],"sources":["D:/agri-community/client/node_modules/twilio/lib/base/BaseTwilio.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst RequestClient_1 = __importDefault(require(\"./RequestClient\")); /* jshint ignore:line */\nconst os = require(\"os\"); /* jshint ignore:line */\nconst url = require(\"url\"); /* jshint ignore:line */\nconst moduleInfo = require(\"../../package.json\"); /* jshint ignore:line */\nconst util = require(\"util\"); /* jshint ignore:line */\nconst RestException = require(\"../base/RestException\"); /* jshint ignore:line */\nvar Twilio;\n(function (Twilio) {\n    /* jshint ignore:start */\n    /**\n     * Parent class for Twilio Client that implements request & validation logic\n     */\n    /* jshint ignore:end */\n    class Client {\n        /* jshint ignore:start */\n        /**\n         * Create a BaseTwilio instance\n         *\n         * @param username -\n         *          The username used for authentication. This is normally account sid, but if using key/secret auth will be\n         *          the api key sid.\n         * @param password -\n         *          The password used for authentication. This is normally auth token, but if using key/secret auth will be\n         *          the secret.\n         * @param opts - The options argument\n         *\n         * @returns A new instance of BaseTwilio\n         */\n        /* jshint ignore:end */\n        constructor(username, password, opts) {\n            this.setOpts(opts);\n            this.username =\n                username ??\n                    this.env?.TWILIO_ACCOUNT_SID ??\n                    process.env.TWILIO_ACCOUNT_SID;\n            this.password =\n                password ??\n                    this.env?.TWILIO_AUTH_TOKEN ??\n                    process.env.TWILIO_AUTH_TOKEN;\n            this.accountSid = \"\";\n            this.setAccountSid(this.opts?.accountSid || this.username);\n            this.invalidateOAuth();\n        }\n        setOpts(opts) {\n            this.opts = opts || {};\n            this.env = this.opts.env || {};\n            this.edge =\n                this.opts.edge ?? this.env.TWILIO_EDGE ?? process.env.TWILIO_EDGE;\n            this.region =\n                this.opts.region ?? this.env.TWILIO_REGION ?? process.env.TWILIO_REGION;\n            this.logLevel =\n                this.opts.logLevel ??\n                    this.env.TWILIO_LOG_LEVEL ??\n                    process.env.TWILIO_LOG_LEVEL;\n            this.timeout = this.opts.timeout;\n            this.keepAlive = this.opts.keepAlive;\n            this.keepAliveMsecs = this.opts.keepAliveMsecs;\n            this.maxSockets = this.opts.maxSockets;\n            this.maxTotalSockets = this.opts.maxTotalSockets;\n            this.maxFreeSockets = this.opts.maxFreeSockets;\n            this.scheduling = this.opts.scheduling;\n            this.ca = this.opts.ca;\n            this.autoRetry = this.opts.autoRetry || false;\n            this.maxRetryDelay = this.opts.maxRetryDelay;\n            this.maxRetries = this.opts.maxRetries;\n            this.userAgentExtensions = this.opts.userAgentExtensions || [];\n            this._httpClient = this.opts.httpClient;\n            if (this.opts.lazyLoading === false) {\n                this._httpClient = this.httpClient;\n            }\n        }\n        setAccountSid(accountSid) {\n            this.accountSid = accountSid || \"\";\n            if (this.accountSid && !this.accountSid?.startsWith(\"AC\")) {\n                const apiKeyMsg = this.accountSid?.startsWith(\"SK\")\n                    ? \". The given SID indicates an API Key which requires the accountSid to be passed as an additional option\"\n                    : \"\";\n                throw new Error(\"accountSid must start with AC\" + apiKeyMsg);\n            }\n        }\n        setCredentialProvider(credentialProvider) {\n            this.credentialProvider = credentialProvider;\n            this.accountSid = \"\";\n            this.invalidateBasicAuth();\n        }\n        invalidateBasicAuth() {\n            this.username = undefined;\n            this.password = undefined;\n        }\n        invalidateOAuth() {\n            this.credentialProvider = undefined;\n        }\n        get httpClient() {\n            if (!this._httpClient) {\n                this._httpClient = new RequestClient_1.default({\n                    timeout: this.timeout,\n                    keepAlive: this.keepAlive,\n                    keepAliveMsecs: this.keepAliveMsecs,\n                    maxSockets: this.maxSockets,\n                    maxTotalSockets: this.maxTotalSockets,\n                    maxFreeSockets: this.maxFreeSockets,\n                    scheduling: this.scheduling,\n                    ca: this.ca,\n                    autoRetry: this.autoRetry,\n                    maxRetryDelay: this.maxRetryDelay,\n                    maxRetries: this.maxRetries,\n                });\n            }\n            return this._httpClient;\n        }\n        /* jshint ignore:start */\n        /**\n         * Makes a request to the Twilio API using the configured http client.\n         * Authentication information is automatically added if none is provided.\n         *\n         * @param opts - The options argument\n         */\n        /* jshint ignore:end */\n        request(opts) {\n            opts = opts || {};\n            if (!opts.method) {\n                throw new Error(\"method is required\");\n            }\n            if (!opts.uri) {\n                throw new Error(\"uri is required\");\n            }\n            const username = opts.username || this.username;\n            const password = opts.password || this.password;\n            const authStrategy = opts.authStrategy || this.credentialProvider?.toAuthStrategy();\n            if (!authStrategy) {\n                if (!username) {\n                    (() => {\n                        throw new Error(\"username is required\");\n                    })();\n                }\n                if (!password) {\n                    (() => {\n                        throw new Error(\"password is required\");\n                    })();\n                }\n            }\n            const headers = opts.headers || {};\n            const pkgVersion = moduleInfo.version;\n            const osName = os.platform();\n            const osArch = os.arch();\n            const nodeVersion = process.version;\n            headers[\"User-Agent\"] = util.format(\"twilio-node/%s (%s %s) node/%s\", pkgVersion, osName, osArch, nodeVersion);\n            this.userAgentExtensions?.forEach((extension) => {\n                headers[\"User-Agent\"] += ` ${extension}`;\n            });\n            headers[\"Accept-Charset\"] = \"utf-8\";\n            if ((opts.method === \"post\" || opts.method === \"put\") &&\n                !headers[\"Content-Type\"]) {\n                headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n            }\n            if (opts.method !== \"delete\" && !headers[\"Accept\"]) {\n                headers[\"Accept\"] = \"application/json\";\n            }\n            var uri = new url.URL(opts.uri);\n            uri.hostname = this.getHostname(uri.hostname, this.edge, this.region);\n            return this.httpClient?.request({\n                method: opts.method,\n                uri: uri.href,\n                username: username,\n                password: password,\n                authStrategy: authStrategy,\n                headers: headers,\n                params: opts.params,\n                data: opts.data,\n                timeout: opts.timeout,\n                allowRedirects: opts.allowRedirects,\n                logLevel: opts.logLevel,\n            });\n        }\n        /* jshint ignore:start */\n        /**\n         * Adds a region and/or edge to a given hostname\n         *\n         * @param hostname - A URI hostname (e.g. api.twilio.com)\n         * @param targetEdge - The targeted edge location (e.g. sydney)\n         * @param targetRegion - The targeted region location (e.g. au1)\n         */\n        /* jshint ignore:end */\n        getHostname(hostname, targetEdge, targetRegion) {\n            const defaultRegion = \"us1\";\n            const domain = hostname.split(\".\").slice(-2).join(\".\");\n            const prefix = hostname.split(\".\" + domain)[0];\n            let [product, edge, region] = prefix.split(\".\");\n            if (edge && !region) {\n                region = edge;\n                edge = undefined;\n            }\n            region = targetRegion || region || (targetEdge && defaultRegion);\n            if (!region) {\n                return hostname;\n            }\n            edge = targetEdge || edge;\n            return [product, edge, region, domain].filter((part) => part).join(\".\");\n        }\n        /* jshint ignore:start */\n        /**\n         * Test if your environment is impacted by a TLS or certificate\n         * change is by sending an HTTP request to the test endpoint\n         *\n         * @throws RestException if the request fails\n         *\n         */\n        /* jshint ignore:end */\n        validateSslCert() {\n            return this.httpClient\n                ?.request({\n                method: \"get\",\n                uri: \"https://tls-test.twilio.com:443\",\n            })\n                .then((response) => {\n                if (response[\"statusCode\"] < 200 || response[\"statusCode\"] >= 300) {\n                    throw new RestException(response);\n                }\n                return response;\n            });\n        }\n    }\n    Twilio.Client = Client;\n})(Twilio || (Twilio = {}));\nmodule.exports = Twilio;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}