{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst AuthStrategy_1 = __importDefault(require(\"./AuthStrategy\"));\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\nclass TokenAuthStrategy extends AuthStrategy_1.default {\n  constructor(tokenManager) {\n    super(\"token\");\n    this.token = \"\";\n    this.tokenManager = tokenManager;\n  }\n  async getAuthString() {\n    return this.fetchToken().then(token => {\n      this.token = token;\n      return `Bearer ${this.token}`;\n    }).catch(error => {\n      throw new Error(`Failed to fetch access token: ${error.message}`);\n    });\n  }\n  requiresAuthentication() {\n    return true;\n  }\n  async fetchToken() {\n    if (this.token == null || this.token.length === 0 || this.isTokenExpired(this.token)) {\n      return this.tokenManager.fetchToken();\n    }\n    return Promise.resolve(this.token);\n  }\n  /**\n   * Function to check if the token is expired with a buffer of 30 seconds.\n   * @param token - The JWT token as a string.\n   * @returns Boolean indicating if the token is expired.\n   */\n  isTokenExpired(token) {\n    try {\n      // Decode the token without verifying the signature, as we only want to read the expiration for this check\n      const decoded = jsonwebtoken_1.default.decode(token);\n      if (!decoded || !decoded.exp) {\n        // If the token doesn't have an expiration, consider it expired\n        return true;\n      }\n      const expiresAt = decoded.exp * 1000;\n      const bufferMilliseconds = 30 * 1000;\n      const bufferExpiresAt = expiresAt - bufferMilliseconds;\n      // Return true if the current time is after the expiration time with buffer\n      return Date.now() > bufferExpiresAt;\n    } catch (error) {\n      // If there's an error decoding the token, consider it expired\n      return true;\n    }\n  }\n}\nexports.default = TokenAuthStrategy;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","AuthStrategy_1","require","jsonwebtoken_1","TokenAuthStrategy","default","constructor","tokenManager","token","getAuthString","fetchToken","then","catch","error","Error","message","requiresAuthentication","length","isTokenExpired","Promise","resolve","decoded","decode","exp","expiresAt","bufferMilliseconds","bufferExpiresAt","Date","now"],"sources":["D:/agri-community/client/node_modules/twilio/lib/auth_strategy/TokenAuthStrategy.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AuthStrategy_1 = __importDefault(require(\"./AuthStrategy\"));\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\nclass TokenAuthStrategy extends AuthStrategy_1.default {\n    constructor(tokenManager) {\n        super(\"token\");\n        this.token = \"\";\n        this.tokenManager = tokenManager;\n    }\n    async getAuthString() {\n        return this.fetchToken()\n            .then((token) => {\n            this.token = token;\n            return `Bearer ${this.token}`;\n        })\n            .catch((error) => {\n            throw new Error(`Failed to fetch access token: ${error.message}`);\n        });\n    }\n    requiresAuthentication() {\n        return true;\n    }\n    async fetchToken() {\n        if (this.token == null ||\n            this.token.length === 0 ||\n            this.isTokenExpired(this.token)) {\n            return this.tokenManager.fetchToken();\n        }\n        return Promise.resolve(this.token);\n    }\n    /**\n     * Function to check if the token is expired with a buffer of 30 seconds.\n     * @param token - The JWT token as a string.\n     * @returns Boolean indicating if the token is expired.\n     */\n    isTokenExpired(token) {\n        try {\n            // Decode the token without verifying the signature, as we only want to read the expiration for this check\n            const decoded = jsonwebtoken_1.default.decode(token);\n            if (!decoded || !decoded.exp) {\n                // If the token doesn't have an expiration, consider it expired\n                return true;\n            }\n            const expiresAt = decoded.exp * 1000;\n            const bufferMilliseconds = 30 * 1000;\n            const bufferExpiresAt = expiresAt - bufferMilliseconds;\n            // Return true if the current time is after the expiration time with buffer\n            return Date.now() > bufferExpiresAt;\n        }\n        catch (error) {\n            // If there's an error decoding the token, consider it expired\n            return true;\n        }\n    }\n}\nexports.default = TokenAuthStrategy;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,cAAc,GAAGP,eAAe,CAACQ,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACjE,MAAMC,cAAc,GAAGT,eAAe,CAACQ,OAAO,CAAC,cAAc,CAAC,CAAC;AAC/D,MAAME,iBAAiB,SAASH,cAAc,CAACI,OAAO,CAAC;EACnDC,WAAWA,CAACC,YAAY,EAAE;IACtB,KAAK,CAAC,OAAO,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACD,YAAY,GAAGA,YAAY;EACpC;EACA,MAAME,aAAaA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACC,UAAU,CAAC,CAAC,CACnBC,IAAI,CAAEH,KAAK,IAAK;MACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,OAAO,UAAU,IAAI,CAACA,KAAK,EAAE;IACjC,CAAC,CAAC,CACGI,KAAK,CAAEC,KAAK,IAAK;MAClB,MAAM,IAAIC,KAAK,CAAC,iCAAiCD,KAAK,CAACE,OAAO,EAAE,CAAC;IACrE,CAAC,CAAC;EACN;EACAC,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI;EACf;EACA,MAAMN,UAAUA,CAAA,EAAG;IACf,IAAI,IAAI,CAACF,KAAK,IAAI,IAAI,IAClB,IAAI,CAACA,KAAK,CAACS,MAAM,KAAK,CAAC,IACvB,IAAI,CAACC,cAAc,CAAC,IAAI,CAACV,KAAK,CAAC,EAAE;MACjC,OAAO,IAAI,CAACD,YAAY,CAACG,UAAU,CAAC,CAAC;IACzC;IACA,OAAOS,OAAO,CAACC,OAAO,CAAC,IAAI,CAACZ,KAAK,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;EACIU,cAAcA,CAACV,KAAK,EAAE;IAClB,IAAI;MACA;MACA,MAAMa,OAAO,GAAGlB,cAAc,CAACE,OAAO,CAACiB,MAAM,CAACd,KAAK,CAAC;MACpD,IAAI,CAACa,OAAO,IAAI,CAACA,OAAO,CAACE,GAAG,EAAE;QAC1B;QACA,OAAO,IAAI;MACf;MACA,MAAMC,SAAS,GAAGH,OAAO,CAACE,GAAG,GAAG,IAAI;MACpC,MAAME,kBAAkB,GAAG,EAAE,GAAG,IAAI;MACpC,MAAMC,eAAe,GAAGF,SAAS,GAAGC,kBAAkB;MACtD;MACA,OAAOE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,eAAe;IACvC,CAAC,CACD,OAAOb,KAAK,EAAE;MACV;MACA,OAAO,IAAI;IACf;EACJ;AACJ;AACAd,OAAO,CAACM,OAAO,GAAGD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}